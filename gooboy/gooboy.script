local gravity = -20
local jump_power = 700
local multijump_count = 2
local speed = 100

function init(self)
	-- Let the script receive input from the player
	msg.post(".", "acquire_input_focus")
	msg.post("camera", "acquire_camera_focus")
	msg.post("/sound#beat1", "play_sound")
	-- msg.post("@system:", "toggle_physics_debug")
	-- the current speed of the space ship

	self.position = go.get_position()
	-- ground / platform collision_response
	self.velocity = vmath.vector3(0, 0, 0)
	self.correction = vmath.vector3()
	self.move_left = false
	self.move_right = false
	self.move_boost = 0
	self.fire = 0
	self.direction = 1
	self.multijump = multijump_count
	self.invincible = false

	self.on_ground = false
	self.platform_contact_from_below_last_frame = false
	self.platform_contact_from_below = false
	
	-- Animate the ship so it's swaying back and forth
	-- go.set(".", "euler.z", -10)
	-- go.animate(".", "euler.z", go.PLAYBACK_LOOP_PINGPONG, 10, go.EASING_INOUTSINE, 5)
end

function update(self, dt)
	-- msg.post("@render:", "clear_color", { color = vmath.vector4(95 /256, 129 / 256, 161 / 256, 1 ) })
	local gravity = vmath.vector3(0, gravity, 0)

	if self.move_left then
		self.velocity.x = - (speed + self.move_boost)
		sprite.set_hflip("#sprite", true)
		self.direction = -1
	elseif self.move_right then
		self.velocity.x = speed	+ self.move_boost
		sprite.set_hflip("#sprite", false)
		self.direction = 1
	else
		self.velocity.x = 0
	end

	if not self.on_ground then
		self.velocity = self.velocity + gravity
	end

	go.set_position(go.get_position() + self.velocity * dt)

	if self.fire > 0 then
		self.fire = self.fire - dt
		if self.fire <= 0 then
			local pos = go.get_position()
			if self.direction == -1 then
				pos.x = pos.x - 40
			else
				pos.x = pos.x + 40
			end
			factory.create("#goo_factory", pos, nil, { direction=self.direction })
		end
	end

	self.correction.x = 0
	self.correction.y = 0
	self.correction.z = 0
	self.on_ground = false
	self.platform_contact_from_below_last_frame = self.platform_contact_from_below
	self.platform_contact_from_below = false
end

local function handle_geometry_contact(self, normal, distance) 
	-- project the correction vector onto the contact normal
	-- (the correction vector is the 0-vector for the first contact point)
	local proj = vmath.dot(self.correction, normal)
	-- calculate the compensation we need to make for this contact point
	local comp = (distance - proj) * normal
	-- add it to the correction vector
	self.correction = self.correction + comp
	-- apply the compensation to the player character
	go.set_position(go.get_position() + comp)
	-- check if the normal points enough up to consider the player standing on the ground
	-- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
	if normal.y > 0.7 then
		self.multijump = multijump_count
		self.on_ground = true
	end
	-- project the velocity onto the normal
	proj = vmath.dot(self.velocity, normal)
	-- if the projection is negative, it means that some of the velocity points towards the contact point
	if proj < 0 then
		-- remove that component in that case
		self.velocity = self.velocity - proj * normal
	end
end

function go_normal(self)
	go.set("#sprite","tint.x",1.0)
	go.set("#sprite","tint.w",1.0)
	self.invincible = false	
	msg.post("#collisionobject", "enable")
end

function take_hit(self, direction, damage ) 
	if not self.invincible then
		local pos = go.get_position()
		pos.x = pos.x + ( direction * damage )
		go.set_position(pos)
		msg.post("controller:/go#main", "remove_energy")
		print("took hit")
		self.invincible = true
		msg.post("#collisionobject", "disable")
		go.animate("#sprite", "tint.x", go.PLAYBACK_ONCE_PINGPONG, 0.5, go.EASING_OUTBOUNCE, 1.5, 0, go_normal)
		go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_PINGPONG, 0.5, go.EASING_OUTBOUNCE, 1.5, 0)
	end
end

function on_message(self, message_id, message, sender)
	-- check for the message

	if message_id == hash("contact_point_response") then
		if message.group == hash("ground") then
			handle_geometry_contact(self, message.normal, message.distance)
		elseif message.group == hash("platform") then
			if message.normal.y > 0 then
				if not self.platform_contact_from_below_last_frame then
					handle_geometry_contact(self, message.normal, message.distance)
					self.platform_contact_from_below = false
				else
					self.platform_contact_from_below = true
				end
			elseif message.normal.y < 0 then
				self.platform_contact_from_below = true
			end
		end
	end

	if message_id == hash("take_damage") then
		local dir = -1
		if go.get_position().x > message.other_position.x then
			dir = 1
		end
		take_hit(self, dir, message.damage)
	end

end

local function resume_animation(self)
	if self.move_left or self.move_right then
		sprite.play_flipbook("#sprite", "Gooboy Walk")
	end
end

local function jump(self)
	-- only allow jump from ground
	if self.multijump> 0 or self.on_ground then
		self.multijump = self.multijump - 1
		self.velocity.y = jump_power
		sprite.play_flipbook("#sprite", "Gooboy Jump", resume_animation)
		msg.post("/sound#gooboy_jump", "play_sound")
	end
end

local function abort_jump(self)
	-- cut the jump short if we are still going up
	if self.velocity.y > 0 then
		-- scale down the upwards speed
		self.velocity.y = self.velocity.y * 0.5
	end
end

function on_input(self, action_id, action)

	if action_id == hash("fire") then 
		if action.pressed then
			sprite.play_flipbook("#sprite", "Gooboy Shoot")
			self.fire = 0.2
		end
	end

	if action_id == hash("up") then 
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end

	if action_id == hash("run") then 
		if action.pressed then
			self.move_boost = speed
		elseif action.released then
			self.move_boost = 0
		end
	end

	if action_id == hash("left") then
		if action.pressed then
			self.move_left = true
			sprite.play_flipbook("#sprite", "Gooboy Walk")
		elseif action.released then
			self.move_left = false
			if not self.move_right then
				sprite.play_flipbook("#sprite", "Gooboy Idle")
			end
		end
	elseif action_id == hash("right") then
		if action.pressed then
			self.move_right = true
			sprite.play_flipbook("#sprite", "Gooboy Walk")
		elseif action.released then
			self.move_right = false
			if not self.move_left then
				sprite.play_flipbook("#sprite", "Gooboy Idle")
			end
		end
	end
end

function final(self)
	-- Return input focus when the object is deleted
	msg.post(".", "release_input_focus")
	-- msg.post("camera", "release_camera_focus")
end
